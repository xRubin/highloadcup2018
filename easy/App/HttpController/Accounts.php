<?php

namespace App\HttpController;

use App\Utility\Exceptions\ControlledException;
use App\Utility\Exceptions\Exception404;
use EasySwoole\Http\AbstractInterface\Controller;
use App\Utility\Pool\RedisPool;
use EasySwoole\EasySwoole\Config;
use EasySwoole\Component\Pool\PoolManager;
use Swoole\Coroutine\Redis;

class Accounts extends Controller
{
    use traits\AccountsFilter;
    use traits\AccountsGroup;
    use traits\AccountsSuggest;
    use traits\AccountsRecommend;

    use traits\AccountsNew;
    use traits\AccountsLikes;
    use traits\AccountsUpdate;

    protected $redis;


    public function gc()
    {
        if ($this->redis)
            PoolManager::getInstance()->getPool(RedisPool::class)->recycleObj($this->redis);

        parent::gc(); // TODO: Change the autogenerated stub
    }

    protected function getRedis(): Redis
    {
        if (!$this->redis) {
            $redis = PoolManager::getInstance()->getPool(RedisPool::class)->getObj(Config::getInstance()->getConf('REDIS.POOL_TIME_OUT'));
            if ($redis) {
                $this->redis = $redis;
            } else {
                throw new \Exception('url :' . $this->request()->getUri()->getPath() . ' error,Redis Pool is Empty');
            }
        }

        return $this->redis;
    }

    public function index()
    {
        throw new Exception404();
    }

    public function actionNotFound(?string $action): void
    {
        throw new Exception404();
    }

    public function onException(\Throwable $throwable): void
    {
        if ($throwable instanceof ControlledException) {
            $this->response()->withStatus($throwable->httpCode);
        } else {
            var_dump($throwable->getMessage(), $throwable->getFile(), $throwable->getLine());
            $this->response()->withStatus(500);
        }
        $this->response()->end();
    }
}